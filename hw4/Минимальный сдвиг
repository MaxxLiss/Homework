#include "bits/stdc++.h"

using namespace std;

static const int mod1 = 1e9 + 7, mod2 = 1e9 + 9;

string s;
int len = 0;

vector<int> deg1, deg2;
vector<int> hash1, hash2;

int mult(int a, int b, int mod) {
    return (int) ((long long) a * b % mod);
}

int diff(int a, int b, int mod) {
    return(a - b + mod) % mod;
}

int sum(int a, int b, int mod) {
    return (a + b) % mod;
}

int best_l = 0;
// 0 - новая больше, 1 - новая меньше
bool binary_search(int pos) {
    int l = pos - 1, r = pos + len - 1;
    while (l + 1 != r) {
        int m = (l + r) / 2;
        if (mult(diff(hash1[best_l + m - pos], hash1[best_l - 1], mod1), deg1[pos], mod1)
            == mult(diff(hash1[m], hash1[pos - 1], mod1), deg1[best_l], mod1)
            || mult(diff(hash2[best_l + m - pos], hash2[best_l - 1], mod2), deg2[pos], mod2)
               == mult(diff(hash2[m], hash2[pos - 1], mod2), deg2[best_l], mod2)) {
            l = m;
        } else {
            r = m;
        }
    }
    return (s[best_l + l - pos + 1] > s[l + 1]);
}

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    cin >> s;
    len = (int) s.size();
    s = " " + s + s;

    srand(time(nullptr));
    int x = rand();
    if (!(x & 1)) {
        ++x;
    }

    deg1 = vector<int> (s.size(), 0);
    deg1[1] = 1;
    deg2 = deg1;
    for (int i = 2; i < deg1.size(); ++i) {
        deg1[i] = mult(deg1[i - 1], x, mod1);
        deg2[i] = mult(deg2[i - 1], x, mod2);
    }

    hash1 = hash2 = vector<int> (s.size(), 0);
    for (int i = 1; i < hash1.size(); ++i) {
        hash1[i] = sum(mult(s[i], deg1[i], mod1), hash1[i - 1], mod1);
        hash2[i] = sum(mult(s[i], deg2[i], mod2), hash2[i - 1], mod2);
    }

    best_l = 1;
    for (int l = 2; l + len <= s.size(); ++l) {
        if (binary_search(l)) {
            best_l = l;
        }
    }

    string ans;
    for (int i = best_l; i < best_l + len; ++i) {
        ans += s[i];
    }

    cout << ans;

    return 0;
}