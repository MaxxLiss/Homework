#include "bits/stdc++.h"

using namespace std;

static const int mod1 = 1e9 + 7, mod2 = 1e9 + 9;

string s;
int len = 0;

vector<int> deg1, deg2;
vector<int> hash1, hash2;

int binmul(int a, int b, int mod) {
    int res = 0;
    while (b) {
        if (b & 1) {
            res += a;
            res %= mod;
        }
        a *= 2;
        a %= mod;
        b >>= 1;
    }
    return res;
}

int best_l = 0, best_r = 0;
// 0 - новая меньше, 1 - новая больше
bool binary_search(int l, int r) {
    while (l + 1)
}

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    cin >> s;
    len = (int) s.size();
    s = s + s;

    srand(time(nullptr));
    int x = rand();
    if (!(x & 1)) {
        ++x;
    }

    deg1 = vector<int> (s.size() + 1);
    deg1[1] = 1;
    deg2 = deg1;
    for (int i = 2; i < deg1.size(); ++i) {
        deg1[i] = binmul(deg1[i - 1], x, mod1);
        deg2[i] = binmul(deg2[i - 1], x, mod2);
    }

    hash1 = hash2 = vector<int> (s.size() + 1, 0);
    for (int i = 1; i < hash1.size(); ++i) {
        hash1[i] = (binmul(s[i - 1], deg1[i], mod1) + hash1[i - 1]) % mod1;
        hash2[i] = (binmul(s[i - 1], deg2[i], mod2) + hash2[i - 1]) % mod2;
    }

    best_l = 1, best_r = len;
    for (int l = 2; l + len - 1 <= s.size(); ++l) {
        binary_search(l, l + len - 1);
    }
    return 0;
}