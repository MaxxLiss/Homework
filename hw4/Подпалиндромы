#include "bits/stdc++.h"

using namespace std;

static const int mod[] = {(int) 1e9 + 7, (int) 1e9 + 9};
static const int base[] = {873489, 409357};
static const int N = 2 * (int) 1e5 + 1;

int pwx[N][2];
int hs[N][2];

string s;

int mul(int a, int b, int i) {
    int i1 = (int) ((long long) a * b % mod[i]);
    return i1;
}

int sum(int a, int b, int i) {
    int i1 = (a += b) < mod[i] ? a : a - mod[i];
    return i1;
}

int dif(int a, int b, int i) {
    return ((a -= b) < 0 ? a + mod[i] : a);
}

int getHash(int l, int r, int i) {
    if (!l) {
        return hs[r][i];
    }
    return dif(hs[r][i], hs[l - 1][i], i);
}

int len = 0;

int pal_c(int pos) {
    if (s[pos] != s[pos + 1]) {
        return 0;
    }
    int l = 0, r = min(pos, len - pos - 2) + 1;
    int rev_pos = s.size() - pos - 2;
    while (l + 1 != r) {
        int m = (l + r) >> 1;
        bool comp = false;
        for (int j = 0; j < 2; ++j) {
            if (mul(getHash(pos - m, pos, j), pwx[rev_pos - m][j], j)
            == mul(getHash(rev_pos - m, rev_pos, j), pwx[pos - m][j], j)) {
                comp = true;
            }
        }
        if (comp) {
            l = m;
        } else {
            r = m;
        }
    }
    return l + 1;
}

int pal_n(int pos) {
    int l = 0, r = min(pos, len - pos - 1) + 1;
    int rev_pos = s.size() - pos - 1;
    while (l + 1 != r) {
        int m = (l + r) >> 1;
        bool comp = false;
        for (int j = 0; j < 2; ++j) {
            if (mul(getHash(pos - m, pos, j), pwx[rev_pos - m][j], j)
                == mul(getHash(rev_pos - m, rev_pos, j), pwx[pos - m][j], j)) {
                comp = true;
            }
        }
        if (comp) {
            l = m;
        } else {
            r = m;
        }
    }
    return l + 1;
}

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    cin >> s;

    auto s1 = s;
    len = s.size();
    std::reverse(s1.begin(), s1.end());
    s += s1;

    for (int j = 0; j < 2; ++j) {
        pwx[0][j] = 1;
        for (int i = 1; i < s.size(); ++i) {
            pwx[i][j] = mul(pwx[i - 1][j], base[j], j);
        }
    }

    for (int j = 0; j < 2; ++j) {
        hs[0][j] = s[0];
        for (int i = 1; i < s.size(); ++i) {
            hs[i][j] = sum(mul(s[i], pwx[i][j], j), hs[i - 1][j], j);
        }
    }

    long long ans = 0;
    for (int i = 0; i + 1 < len; ++i) {
        ans += pal_c(i);
        ans += pal_n(i);
    }

    ans++;

    cout << ans;

    return 0;
}