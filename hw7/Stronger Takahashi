#include "bits/stdc++.h"

using namespace std;

const int H = 500, INF = 1e9;

const int di[] = {1, -1, 0, 0};
const int dj[] = {0, 0, -1, 1};

const int dii[] = {-1, -1, -1, 0, 1, 1, 1, 0};
const int djj[] = {-1, 0, 1,    1, 1, 0, -1, -1};

string field[H];
int dp[H][H];

priority_queue<pair<int, pair<int, int>>> work;

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    fill_n(&dp[0][0], H * H, INF);
    dp[0][0] = 0;
    work.push({0, {0, 0}});

    int h = 0, w = 0;
    cin >> h >> w;
    for (int i = 0; i < h; ++i) {
        cin >> field[i];
    }

    while (!work.empty()) {
        auto curr = work.top().second;
        auto cost = -work.top().first;
        work.pop();

        if (dp[curr.first][curr.second] != cost) {
            continue;
        }

        for (int i = 0; i < 4; ++i) {
            auto ni = di[i] + curr.first, nj = dj[i] + curr.second;
            if (0 <= ni && ni < h && 0 <= nj && nj < w) {
                if (field[ni][nj] == '.') {
                    if (dp[ni][nj] > cost) {
                        dp[ni][nj] = cost;
                        work.push({-dp[ni][nj], {ni, nj}});
                    }
                } else if (dp[ni][nj] >= cost + 1) {
                    dp[ni][nj] = cost + 1;
                    work.push({-dp[ni][nj], {ni, nj}});

                    for (int j = 0; j < 8; ++j) {
                        auto nii = dii[j] + ni, njj = djj[j] + nj;
                        if (0 <= nii && nii < h && 0 <= njj && njj < w) {
                            if (field[nii][njj] == '#' && dp[nii][njj] > cost + 1) {
                                dp[nii][njj] = cost + 1;
                                work.push({-dp[nii][njj], {nii, njj}});
                            }
                        }
                    }
                }
            }
        }
    }

    cout << dp[h - 1][w - 1];

    return 0;
}
