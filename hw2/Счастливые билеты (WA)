//#include "bits/stdc++.h"
//
//using namespace std;
//
//int n = 0, sm = 0;
//uint64_t ans = 0;
//
//void f(int len, int curr_sm) {
//    if (curr_sm == sm / 2 && len == n) {
//        ans++;
//        return;
//    }
//    if (len > n || curr_sm > sm / 2) {
//        return;
//    }
//    for (int i = 0; i <= n; ++ i) {
//        f(len + 1, curr_sm + i);
//    }
//}
//
//int main() {
//    cin.tie(nullptr); cout.tie(nullptr);
//    ios_base::sync_with_stdio(false);
//
//    cin >> n >> sm;
//
//    f(0, 0);
//
//    cout << ans * ans;
//
//    return 0;
//}

#include "bits/stdc++.h"

using namespace std;

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n = 0, sm = 0;
    cin >> n >> sm;
    sm /= 2;

    // dp[i][j] - количество способов составить из i цифр сумму j
    // dp[i][j] = sum(dp[i - 1][j - 9 ... j])

    vector<vector<uint64_t>> dp(n + 1, vector<uint64_t>(sm + 1, 0));
    for (int i = 0; i <= min(9, sm); ++i) {
        dp[1][i] = 1;
    }
    for (int i = 2; i <= n; ++i) {
        uint64_t loc_sm = 0;
        for (int j = 0; j <= min(9 * i, sm); ++j) {
            loc_sm += dp[i - 1][j];
            if (j > 9) {
                loc_sm -= dp[i - 1][j - 10];
            }
            dp[i][j] = loc_sm;
        }
    }

//    for(auto &a : dp) {
//        for (auto &it : a) {
//            cout << it << " ";
//        }
//        cout << endl;
//    }

    cout << dp[n][sm] * dp[n][sm];

    return 0;
}

