#include "bits/stdc++.h"

using namespace std;

const long long INF = 3 * 1e18;
const int N = 2 * 1e3, M = 5 * 1e3;

struct edge {
    int from = 0, to = 0, cost = 0;
};

long long dist[N];
int p[N];
edge e[M];

void find_cycle(int v) {
    dist[v] = -INF;

    if (dist[p[v]] != -INF) {
        find_cycle(p[v]);
    }

}

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    freopen("path.in", "r", stdin);
    freopen("path.out", "w", stdout);

    int n = 0, m = 0, s = 0;
    cin >> n >> m >> s;
    s--;

    fill_n(dist, N, INF);
    dist[s] = 0;

    for (int i = 0; i < m; ++i) {
        int from = 0, to = 0, cost = 0;
        cin >> from >> to >> cost;
        e[i] = {from - 1, to - 1, cost};
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int from = e[j].from, to = e[j].to, cost = e[j].cost;
            if (dist[from] != INF && dist[to] > dist[from] + cost) {
                dist[to] = max(dist[from] + cost, -INF + 1);
                p[to] = from;
                if (i == n - 1) {
                    find_cycle(to);
                }
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        switch (dist[i]) {
            case INF:
                cout << "*\n";
                break;
            case -INF:
                cout << "-\n";
                break;
            default:
                cout << dist[i] << '\n';
                break;
        }
    }

    return 0;
}