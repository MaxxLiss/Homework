#include "bits/stdc++.h"

using namespace std;

const int N = 2e4 + 1, M = 5e4;
const long long INF = 3e18;

struct edge {
    int from = 0, to = 0;
    long long cost = 0;
};

// 0 - не посещена 1 - в обходе / отрицательном цикле 2 - посещена
int p[N], status[N];
long long d[N];
edge e[M];

void find_cycle(int v) {
    status[v] = 1;
    if (!status[p[v]]) {
        find_cycle(p[v]);
    }
    status[v] = status[p[v]];
}

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    freopen("path.in", "r", stdin);
    freopen("path.out", "w", stdout);

    int n = 0, m = 0, s = 0;
    cin >> n >> m >> s;

    fill_n(d, N, INF);
    d[s] = 0;
    p[s] = 0;

    memset(status, 0, sizeof status);
    status[0] = 2;

    for (int i = 0; i < m; ++i) {
        int from = 0, to = 0;
        long long cost = 0;
        cin >> from >> to >> cost;
        e[i] = {from, to, cost};
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (d[e[j].from] != INF && d[e[j].to] > d[e[j].from] + e[j].cost) {
                d[e[j].to] = max(-INF, d[e[j].from] + e[j].cost);
                p[e[j].to] = e[j].from;
            }
        }
    }

    for (int i = 1; i <= n; ++i) {
        if (!status[i]) {
            find_cycle(i);
        }
        if (d[i] == INF) {
            cout << "*\n";
        } else if (status[i] == 1) {
            cout << "-\n";
        } else {
            cout << d[i] << '\n';
        }
    }

    return 0;
}