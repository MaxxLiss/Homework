#include "bits/stdc++.h"

using namespace std;

static const int INF = 1e9;
static const int N = 2 * 1e3, M = 1e4;

struct edge {
    int from = 0, to = 0, cost = 0;

    edge() = default;

    edge(int from, int to, int cost) : from(from), to(to), cost(cost) {}
};

int dist[N], p[N];
edge e[M];

void find_cycle(int v) {
    if (dist[v] == INF) {
        return;
    }
    dist[v] = INF;
    find_cycle(p[v]);
}

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    freopen("maze.in", "r", stdin);
    freopen("maze.out", "w", stdout);

    int n = 0, m = 0;
    cin >> n >> m;
    fill_n(dist, N, -INF);
    dist[0] = 0;

    for (int i = 0; i < m; ++i) {
        int from = 0, to = 0, cost = 0;
        cin >> from >> to >> cost;
        from--; to--;
        e[i] = {from, to, cost};
    }

    dist[0] = 0;
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (dist[e[j].from] != -INF && dist[e[j].to] < dist[e[j].from] + e[j].cost) {
                dist[e[j].to] = dist[e[j].from] + e[j].cost;
                if (i == n) {
                    find_cycle(e[j].to);
                }
            }
        }
    }

    switch (dist[n - 1]) {
        case -INF:
            cout << ":(";
            break;
        case INF:
            cout << ":)";
            break;
        default:
            cout << dist[n - 1];
            break;
    }

    return 0;
}