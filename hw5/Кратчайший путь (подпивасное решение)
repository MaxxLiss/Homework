#include "bits/stdc++.h"

using namespace std;

const int N = 2e4 + 1, M = 5e4;
const long long INF = 4e18;

struct edge {
    int from = 0, to = 0;
    long long cost = 0;
};

long long d[N];
edge e[M];

int main() {
    cin.tie(nullptr); cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    freopen("path.in", "r", stdin);
    freopen("path.out", "w", stdout);

    int n = 0, m = 0, s = 0;
    cin >> n >> m >> s;

    fill_n(d, N, INF);
    d[s] = 0;

    for (int i = 0; i < m; ++i) {
        int from = 0, to = 0;
        long long cost = 0;
        cin >> from >> to >> cost;
        e[i] = {from, to, cost};
    }

    for (int i = 0; i < 4 * n + 1; ++i) {
        for (int j = 0; j < m; ++j) {
            if (d[e[j].from] != INF && d[e[j].to] > d[e[j].from] + e[j].cost) {
                d[e[j].to] = max(-INF, d[e[j].from] + e[j].cost);
                if (i >= n) {
                    d[e[j].to] = -INF;
                }
            }
        }
    }

    for (int i = 1; i <= n; ++i) {
        switch (d[i]) {
            case INF:
                cout << "*\n";
                break;
            case -INF:
                cout << "-\n";
                break;
            default:
                cout << d[i] << '\n';
                break;
        }
    }

    return 0;
}