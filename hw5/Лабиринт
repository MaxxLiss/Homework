#include "bits/stdc++.h"

using namespace std;

static const int N = 1e3 + 1;

int g[N][N];

int di[] = {1, -1, 0, 0};
int dj[] = {0, 0, 1, -1};

int n = 0, m = 0;

int num = -1;
int comp[N][N];
int cnt_comp[N * N];

void fill_comp(int pos_i, int pos_j) {
    num++;
    cnt_comp[num] = 1;
    comp[pos_i][pos_j] = num;

    queue<pair<int, int>> q;
    q.emplace(pos_i, pos_j);

    while (!q.empty()) {
        int s_i = q.front().first, s_j = q.front().second;
        q.pop();

        for (int k = 0; k < 4; ++k) {
            int n_i = s_i + di[k], n_j = s_j + dj[k];
            if (0 <= n_i && n_i < n && 0 <= n_j && n_j < m && g[n_i][n_j] && comp[n_i][n_j] == -1) {
                cnt_comp[num]++;
                comp[n_i][n_j] = num;
                q.emplace(n_i, n_j);
            }
        }
    }
}

int main() {

    cin >> n >> m;
    memset(&comp[0][0], -1, sizeof comp);

    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        for (int j = 0; j < m; ++j) {
            g[i][j] = (s[j] == '.');
        }
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (g[i][j] && comp[i][j] == -1) {
                fill_comp(i, j);
            }
        }
    }

    string ans;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (!g[i][j]) {
                vector<int> used_comp;
                int sum = 1;
                for (int k = 0; k < 4; ++k) {
                    int n_i = i + di[k], n_j = j + dj[k];
                    if (0 <= n_i && n_i < n && 0 <= n_j && n_j < m && g[n_i][n_j]) {
                        bool a_used = false;
                        for (int l : used_comp) {
                            if (comp[n_i][n_j] == l) {
                                a_used = true;
                            }
                        }
                        if (a_used) {
                            continue;
                        } else {
                            used_comp.push_back(comp[n_i][n_j]);
                        }

                        sum += cnt_comp[comp[n_i][n_j]];
                    }
                }
                ans += to_string(sum % 10);
            } else {
                ans += '.';
            }
        }
        ans += '\n';
    }

    cout << ans;

    return 0;
}
